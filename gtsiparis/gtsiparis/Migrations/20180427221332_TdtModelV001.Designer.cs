// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using gtsiparis.Data;

namespace gtsiparis.Migrations
{
    [DbContext(typeof(TdtDbContext))]
    [Migration("20180427221332_TdtModelV001")]
    partial class TdtModelV001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview2-30571");

            modelBuilder.Entity("gtsiparis.Data.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Ad");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Mobil");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Soyad");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("gtsiparis.Data.Model.Birim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Ad");

                    b.Property<int?>("GrupId");

                    b.HasKey("Id");

                    b.HasIndex("GrupId");

                    b.ToTable("tdt.Birim");
                });

            modelBuilder.Entity("gtsiparis.Data.Model.Grup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Ad");

                    b.Property<string>("Il");

                    b.Property<string>("Ilce");

                    b.Property<string>("Mahalle");

                    b.Property<string>("PostaKodu");

                    b.Property<string>("SemtBelde");

                    b.HasKey("Id");

                    b.ToTable("tdt.Grup");
                });

            modelBuilder.Entity("gtsiparis.Data.Model.Kategori", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Ad");

                    b.Property<bool>("Aktif");

                    b.Property<int?>("GrupId");

                    b.HasKey("Id");

                    b.HasIndex("GrupId");

                    b.ToTable("tdt.Kategori");
                });

            modelBuilder.Entity("gtsiparis.Data.Model.Siparis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GrupId");

                    b.Property<string>("KullaniciId");

                    b.Property<DateTime>("Tarih")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GrupId");

                    b.ToTable("tdt.Siparis");
                });

            modelBuilder.Entity("gtsiparis.Data.Model.SiparisKalemi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BirimFiyat");

                    b.Property<decimal>("Miktar");

                    b.Property<int?>("SiparisId");

                    b.Property<decimal>("Tutar");

                    b.Property<int?>("UrunId");

                    b.HasKey("Id");

                    b.HasIndex("SiparisId");

                    b.HasIndex("UrunId");

                    b.ToTable("tdt.SiparisKalemi");
                });

            modelBuilder.Entity("gtsiparis.Data.Model.Uretici", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Ad");

                    b.Property<int?>("GrupId");

                    b.Property<string>("Il");

                    b.Property<string>("Ilce");

                    b.Property<string>("Mahalle");

                    b.Property<string>("Mobile");

                    b.Property<string>("PostaKodu");

                    b.Property<string>("SemtBelde");

                    b.HasKey("Id");

                    b.HasIndex("GrupId");

                    b.ToTable("tdt.Uretici");
                });

            modelBuilder.Entity("gtsiparis.Data.Model.Urun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Aciklama");

                    b.Property<string>("Ad");

                    b.Property<bool>("Aktif");

                    b.Property<DateTime?>("Baslangic")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BirimId");

                    b.Property<DateTime?>("Bitis")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fiyat");

                    b.Property<int?>("GrupId");

                    b.Property<int?>("KategoriId");

                    b.Property<decimal>("Maliyet");

                    b.Property<int?>("Mesafe");

                    b.Property<int?>("UreticiId");

                    b.Property<string>("UretimBolge");

                    b.HasKey("Id");

                    b.HasIndex("BirimId");

                    b.HasIndex("GrupId");

                    b.HasIndex("KategoriId");

                    b.HasIndex("UreticiId");

                    b.ToTable("tdt.Urun");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("gtsiparis.Data.Model.Birim", b =>
                {
                    b.HasOne("gtsiparis.Data.Model.Grup", "Grup")
                        .WithMany()
                        .HasForeignKey("GrupId");
                });

            modelBuilder.Entity("gtsiparis.Data.Model.Kategori", b =>
                {
                    b.HasOne("gtsiparis.Data.Model.Grup", "Grup")
                        .WithMany()
                        .HasForeignKey("GrupId");
                });

            modelBuilder.Entity("gtsiparis.Data.Model.Siparis", b =>
                {
                    b.HasOne("gtsiparis.Data.Model.Grup", "Grup")
                        .WithMany()
                        .HasForeignKey("GrupId");
                });

            modelBuilder.Entity("gtsiparis.Data.Model.SiparisKalemi", b =>
                {
                    b.HasOne("gtsiparis.Data.Model.Siparis", "Siparis")
                        .WithMany("SiparisKalemleri")
                        .HasForeignKey("SiparisId");

                    b.HasOne("gtsiparis.Data.Model.Urun", "Urun")
                        .WithMany()
                        .HasForeignKey("UrunId");
                });

            modelBuilder.Entity("gtsiparis.Data.Model.Uretici", b =>
                {
                    b.HasOne("gtsiparis.Data.Model.Grup", "Grup")
                        .WithMany()
                        .HasForeignKey("GrupId");
                });

            modelBuilder.Entity("gtsiparis.Data.Model.Urun", b =>
                {
                    b.HasOne("gtsiparis.Data.Model.Birim", "Birim")
                        .WithMany()
                        .HasForeignKey("BirimId");

                    b.HasOne("gtsiparis.Data.Model.Grup", "Grup")
                        .WithMany()
                        .HasForeignKey("GrupId");

                    b.HasOne("gtsiparis.Data.Model.Kategori", "Kategori")
                        .WithMany()
                        .HasForeignKey("KategoriId");

                    b.HasOne("gtsiparis.Data.Model.Uretici", "Uretici")
                        .WithMany()
                        .HasForeignKey("UreticiId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("gtsiparis.Data.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("gtsiparis.Data.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("gtsiparis.Data.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("gtsiparis.Data.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
